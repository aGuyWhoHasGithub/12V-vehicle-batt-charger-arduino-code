const int relayPin = 18;      // Output pin to control the relay
const int comparatorPin = 19; // Input pin to read the operational amplifier output

// Battery charging status
bool batteryFullyCharged = false;

void setup() {
  pinMode(relayPin, OUTPUT);   // Set pin 18 as output
  pinMode(comparatorPin, INPUT); // Set pin 19 as input
  digitalWrite(relayPin, LOW);  // Ensure the relay is off at startup
  Serial.begin(115200);
}

void loop() {
  if (!batteryFullyCharged) {
    // Activate the relay for 1.5 seconds to charge the battery
    digitalWrite(relayPin, HIGH);
    Serial.println("relayPin state --->" + String(digitalRead(relayPin)));
    delay(1500);

    // Turn off the relay for 10 milliseconds
    digitalWrite(relayPin, LOW);
    Serial.println("relayPin state --->" + String(digitalRead(relayPin)));
    delay(10);

    // Read the operational amplifier output (pin 19)
    int comparatorState = digitalRead(comparatorPin);
    Serial.println("comparatorPin --->" + String(comparatorState));
    
    if (comparatorState == HIGH) {
      Serial.println("***BATTERY ISN'T FULLY CHARGED***");
      // Battery is not fully charged, repeat the process
      return; // End the current loop and start a new iteration from the beginning
    } else {
      Serial.println("***BATTERY SUCCESSFULLY CHARGED***");
      // Battery is fully charged, enter standby mode
      batteryFullyCharged = true;
    }
  } else {
    // If the battery is fully charged, wait and check again
    delay(500);
    int comparatorState = digitalRead(comparatorPin);
    if (comparatorState == HIGH) {
      // If the voltage drops, restart the charging cycle
      Serial.println("***BATTERY IS CHARGING AGAIN***");
      batteryFullyCharged = false; // Reset the charging status
    }
  }
}
